selectAll.

result(result).

field(result, "scopingPercentage", 100 * Scoped / Total) :-
    Total = #count {
        card(Control) :
        childResult(_, Control, _)
    },
    Scoped = #count {
        card(Control) :
        childResult(_, Control, "scopingDone")
    }.

field(Card, "compoundRank", Rank) :-
    card(Card),
    not parent(Card, _),
    field(Card, "rank", Rank).

field(Card, "compoundRank", @concatenate(ParentRank, " - ", Rank)) :-
    card(Card),
    parent(Card, Parent),
    field(Card, "rank", Rank),
    field(Parent, "compoundRank", ParentRank).

field(Control, "phase", PhaseTitle) :-
    childResult(_, Control, _),
    field(Phase, "cardType", "secdeva/cardTypes/phase"),
    ancestor(Control, Phase),
    field(Phase, "title", PhaseTitle),
    not field(MiddleAncestor, "cardType", "secdeva/cardTypes/phase") :
    ancestor(MiddleAncestor, Phase),
    ancestor(Control, MiddleAncestor).

field(
    Control,
    "scopingStatus",
    @concatenate("*", ScopingStatus, "* (", State, ")")) :-
        childResult(_, Control, _),
        field(Control, "workflowState", State),
        secdeva_scopingStatus(State, ScopingStatus).

childResult(result, Control, "scopingNotDone") :-
    secdeva_closestProject({{cardKey}}, Project),
    secdeva_closestProject(Control, Project),
    field(Control, "cardType", "base/cardTypes/annualTask"),
    field(Control, "workflowState", "Open"),
    not hiddenInTreeView(Control).

childResult(result, Control, "scopingDone") :-
    secdeva_closestProject({{cardKey}}, Project),
    secdeva_closestProject(Control, Project),
    field(Control, "cardType", "base/cardTypes/annualTask"),
    not field(Control, "workflowState", "Open"),
    not hiddenInTreeView(Control).

order(2, "scopingNotDone", 1, "compoundRank", "ASC").
order(2, "scopingDone", 1, "compoundRank", "ASC").

